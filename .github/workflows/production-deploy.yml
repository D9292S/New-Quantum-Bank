name: Production Deployment Pipeline
on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      deploy_percentage:
        description: 'Percentage of traffic to route to new version (canary)'
        required: true
        default: '20'
        type: number
      rollback:
        description: 'Rollback to previous version'
        required: false
        default: false
        type: boolean

env:
  PRODUCTION_APP_NAME: quantum-superbot
  CANARY_APP_NAME: quantum-superbot-canary
  DISCORD_API_BASE_URL: https://discord.com/api/v10

jobs:
  verify-validation:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/heroku-deployment'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Check for validation label on merged PR
        id: validation_check
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Get the latest commit
            const commit = context.sha;
            
            // Find PRs related to this commit
            const response = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: commit
            });
            
            // Look for PRs with validation labels
            let isValidated = false;
            for (const pr of response.data) {
              if (pr.base.ref === 'heroku-deployment') {
                if (pr.labels.some(label => label.name === 'validated-in-staging' || label.name === 'ci-cd-validated')) {
                  isValidated = true;
                  console.log(`Found validated PR #${pr.number}: ${pr.title}`);
                  break;
                }
              }
            }
            
            // Output result
            return isValidated;
        
      - name: Abort if not validated
        if: steps.validation_check.outputs.result != 'true'
        run: |
          echo "::error::This commit has not been validated in staging! It must come from a PR with 'validated-in-staging' or 'ci-cd-validated' labels."
          exit 1

  verify-tests:
    runs-on: ubuntu-latest
    needs: [verify-validation]
    if: always() && (needs.verify-validation.result == 'success' || needs.verify-validation.result == 'skipped')
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv pip install --system pytest pytest-asyncio pytest-cov
          uv pip install -e . --system
          
          # Install optional performance libraries for high performance mode
          uv pip install --system uvloop orjson cycler matplotlib || true
      
      - name: Run all tests
        env:
          PERFORMANCE_MODE: high
          OPTIMIZATIONS_AVAILABLE: "true"
          LOG_LEVEL: verbose
          DEVCYCLE_SERVER_SDK_KEY: ${{ secrets.DEVCYCLE_SERVER_SDK_KEY || 'test-key' }}
        run: |
          pytest --cov=./ --cov-report=xml -v
      
      - name: Verify code coverage
        run: |
          COVERAGE=$(python -c "import xml.etree.ElementTree as ET; print(ET.parse('coverage.xml').getroot().attrib['line-rate'])")
          COVERAGE_PERCENT=$(python -c "print(round(float('${COVERAGE}') * 100, 2))")
          echo "Code coverage: ${COVERAGE_PERCENT}%"
          
          if python -c "import sys; sys.exit(0 if float('${COVERAGE_PERCENT}') >= 80 else 1)"; then
            echo "✅ Code coverage meets requirements"
          else
            echo "❌ Code coverage below 80%"
            exit 1
          fi

  security-scan:
    runs-on: ubuntu-latest
    needs: verify-tests
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Run security scans
        run: |
          # Safety check for Python dependencies
          python -m pip install --upgrade pip
          pip install safety bandit
          
          echo "Running safety check..."
          safety check -r requirements.txt --full-report || echo "Safety check found vulnerabilities"
          
          echo "Running bandit scan..."
          bandit -r . -x tests/ -f json -o bandit-results.json || echo "Bandit scan found issues"
          
          # Optional Snyk scan - commented out until properly configured
          # To use Snyk, uncomment the following section and add SNYK_TOKEN to GitHub secrets
          # echo "Running Snyk scan..."
          # curl -sL https://raw.githubusercontent.com/snyk/snyk/master/scripts/install.sh | bash
          # snyk test --severity-threshold=high || echo "Snyk scan found vulnerabilities"

  build-production:
    runs-on: ubuntu-latest
    needs: [verify-tests, security-scan]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}/production
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=short
            latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            ENVIRONMENT=production
            BUILD_VERSION=${{ github.ref_name }}
            OPTIMIZATIONS_AVAILABLE=true
      
      - name: Create release artifacts
        run: |
          mkdir -p release-artifacts
          echo "Release ${{ github.ref_name }}" > release-artifacts/release-notes.md
          echo "Commit: ${{ github.sha }}" >> release-artifacts/release-notes.md
          echo "Built: $(date)" >> release-artifacts/release-notes.md
          
          # Create deployment manifest
          cat > release-artifacts/deployment-manifest.json << EOF
          {
            "version": "${{ github.ref_name }}",
            "commit": "${{ github.sha }}",
            "image": "ghcr.io/${{ github.repository }}/production:latest",
            "buildTime": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "buildId": "${{ github.run_id }}"
          }
          EOF
      
      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: release-artifacts/
          retention-days: 90

  canary-deployment:
    runs-on: ubuntu-latest
    needs: build-production
    if: ${{ !github.event.inputs.rollback }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Heroku CLI
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh
          
      - name: Login to Heroku
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          heroku container:login
      
      - name: Configure canary environment
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          # Set canary-specific configuration
          heroku config:set ENVIRONMENT=production --app ${{ env.CANARY_APP_NAME }}
          heroku config:set IS_CANARY=true --app ${{ env.CANARY_APP_NAME }}
          heroku config:set PERFORMANCE_MODE=high --app ${{ env.CANARY_APP_NAME }}
          heroku config:set OPTIMIZATIONS_AVAILABLE=true --app ${{ env.CANARY_APP_NAME }}
          heroku config:set DEVCYCLE_SERVER_SDK_KEY=${{ secrets.DEVCYCLE_SERVER_SDK_KEY }} --app ${{ env.CANARY_APP_NAME }}
          
          # Set traffic percentage
          TRAFFIC_PERCENTAGE=${{ github.event.inputs.deploy_percentage || '20' }}
          heroku config:set TRAFFIC_PERCENTAGE=${TRAFFIC_PERCENTAGE} --app ${{ env.CANARY_APP_NAME }}
          
          # Enable monitoring
          heroku config:set ENHANCED_MONITORING=true --app ${{ env.CANARY_APP_NAME }}
          heroku config:set ERROR_REPORTING_LEVEL=verbose --app ${{ env.CANARY_APP_NAME }}
          heroku config:set LOG_LEVEL=verbose --app ${{ env.CANARY_APP_NAME }}
      
      - name: Deploy to canary
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          # Pull the image from GitHub Container Registry
          docker pull ghcr.io/${{ github.repository }}/production:latest
          
          # Tag for Heroku
          docker tag ghcr.io/${{ github.repository }}/production:latest registry.heroku.com/${{ env.CANARY_APP_NAME }}/web
          
          # Push to Heroku
          docker push registry.heroku.com/${{ env.CANARY_APP_NAME }}/web
          
          # Release the container
          heroku container:release web --app ${{ env.CANARY_APP_NAME }}
      
      - name: Run smoke tests
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          # Wait for app to start
          sleep 30
          
          # Run basic health check
          curl -f https://${{ env.CANARY_APP_NAME }}.herokuapp.com/health || exit 1
          
          # Run smoke tests
          python tests/smoke/run_smoke_tests.py --url https://${{ env.CANARY_APP_NAME }}.herokuapp.com
      
      - name: Monitor canary metrics
        run: |
          # Set up monitoring for 5 minutes
          echo "Monitoring canary deployment for 5 minutes..."
          
          # Check error rates
          for i in {1..5}; do
            echo "Checking error rates (minute $i)..."
            curl -s https://${{ env.CANARY_APP_NAME }}.herokuapp.com/metrics | grep error_rate
            sleep 60
          done
      
      - name: Create deployment record
        uses: chrnorm/deployment-action@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment: canary-deployment
          initial-status: success

  production-deployment:
    runs-on: ubuntu-latest
    needs: [build-production, canary-deployment]
    if: ${{ always() && (needs.canary-deployment.result == 'success' || needs.canary-deployment.result == 'skipped') && !github.event.inputs.rollback }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Heroku CLI
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh
          
      - name: Login to Heroku
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          heroku container:login
      
      - name: Configure production environment
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          # Set production-specific configuration
          heroku config:set ENVIRONMENT=production --app ${{ env.PRODUCTION_APP_NAME }}
          heroku config:set IS_CANARY=false --app ${{ env.PRODUCTION_APP_NAME }}
          heroku config:set TRAFFIC_PERCENTAGE=100 --app ${{ env.PRODUCTION_APP_NAME }}
          heroku config:set OPTIMIZATIONS_AVAILABLE=true --app ${{ env.PRODUCTION_APP_NAME }}
          heroku config:set DEVCYCLE_SERVER_SDK_KEY=${{ secrets.DEVCYCLE_SERVER_SDK_KEY }} --app ${{ env.PRODUCTION_APP_NAME }}
          
          # Production performance settings
          heroku config:set PERFORMANCE_MODE=high --app ${{ env.PRODUCTION_APP_NAME }}
          heroku config:set QUERY_CACHE_SIZE=5000 --app ${{ env.PRODUCTION_APP_NAME }}
          heroku config:set QUERY_CACHE_TTL=1800 --app ${{ env.PRODUCTION_APP_NAME }}
          heroku config:set LOG_LEVEL=normal --app ${{ env.PRODUCTION_APP_NAME }}
      
      - name: Deploy to production
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          # Pull the image from GitHub Container Registry
          docker pull ghcr.io/${{ github.repository }}/production:latest
          
          # Tag for Heroku
          docker tag ghcr.io/${{ github.repository }}/production:latest registry.heroku.com/${{ env.PRODUCTION_APP_NAME }}/web
          
          # Push to Heroku
          docker push registry.heroku.com/${{ env.PRODUCTION_APP_NAME }}/web
          
          # Release the container
          heroku container:release web --app ${{ env.PRODUCTION_APP_NAME }}
      
      - name: Run post-deployment checks
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          # Wait for app to start
          sleep 30
          
          # Run post-deployment script
          heroku run python heroku_scripts/post_deploy.py --app ${{ env.PRODUCTION_APP_NAME }}
          
          # Check health endpoint
          curl -f https://${{ env.PRODUCTION_APP_NAME }}.herokuapp.com/health || echo "Health check failed"
      
      - name: Create deployment record
        uses: chrnorm/deployment-action@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment: production
          initial-status: success

  rollback:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.rollback }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Heroku CLI
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh
          
      - name: Login to Heroku
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          heroku container:login
      
      - name: Rollback to previous release
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          echo "Rolling back to previous release..."
          heroku releases:rollback --app ${{ env.PRODUCTION_APP_NAME }}
      
      - name: Verify rollback
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          # Wait for rollback to complete
          sleep 30
          
          # Check health endpoint
          curl -f https://${{ env.PRODUCTION_APP_NAME }}.herokuapp.com/health || echo "Health check failed after rollback"
      
      - name: Create rollback record
        uses: chrnorm/deployment-action@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment: production
          initial-status: success
          description: "Rollback to previous version"

  notify-team:
    runs-on: ubuntu-latest
    needs: [production-deployment, rollback]
    if: always()
    steps:
      - name: Notify on success
        if: ${{ needs.production-deployment.result == 'success' || needs.rollback.result == 'success' }}
        run: |
          echo "Production deployment successful! Notification would be sent here."
          # Add Discord webhook notification here
      
      - name: Notify on failure
        if: ${{ needs.production-deployment.result == 'failure' || needs.rollback.result == 'failure' }}
        run: |
          echo "Production deployment failed! Notification would be sent here."
          # Add Discord webhook notification here
