name: Performance Tests
on:
  push:
    branches: [ main ]
    paths:
      - 'optimizations/**'
      - 'launcher.py'
      - 'tools/**'
      - 'pyproject.toml'
  pull_request:
    branches: [ main ]
    paths:
      - 'optimizations/**'
      - 'launcher.py'
      - 'tools/**'
      - 'pyproject.toml'
  workflow_dispatch: # Allow manual triggering

jobs:
  test-optimizations:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        python-version: [3.12]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install UV
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Install dependencies with UV
      run: |
        uv pip install --system psutil matplotlib msgpack expiringdict
        uv pip install -e . --system

    - name: Verify Memory Management
      run: |
        python -c "
        from optimizations.memory_management import get_memory_manager
        memory_manager = get_memory_manager()
        print(f'Memory manager: {memory_manager}')
        print(f'Current memory usage: {memory_manager.get_memory_usage():.2f}MB')
        memory_manager.force_collection()
        print('Memory management working correctly')
        "

    - name: Verify Query Cache
      run: |
        python -c "
        from optimizations.db_performance import get_query_cache
        cache = get_query_cache()
        print(f'Query cache: {cache}')
        cache.set('test_key', 'test_value')
        value = cache.get('test_key')
        assert value == 'test_value', f'Expected test_value, got {value}'
        print('Query cache working correctly')
        "

    - name: Run optimization tests
      run: |
        python tools/check_optimizations.py

    - name: Run quick performance benchmark
      run: |
        python tools/run_performance_tests.py --quick || echo "Performance tests completed with non-zero exit code"

    - name: Generate performance report
      run: |
        python -c "
        import time
        import json
        import platform
        import os
        import psutil
        from datetime import datetime
        
        # Get system info
        system_info = {
            'os': platform.system(),
            'python': platform.python_version(),
            'cpu': platform.processor(),
            'memory': f'{psutil.virtual_memory().total / (1024**3):.2f}GB',
            'cores': os.cpu_count(),
            'timestamp': datetime.now().isoformat()
        }
        
        # Create performance report
        report = {
            'system': system_info,
            'test_date': datetime.now().isoformat(),
            'results': {
                'memory_management': True,
                'query_cache': True
            }
        }
        
        # Save the report
        os.makedirs('performance_reports', exist_ok=True)
        with open(f'performance_reports/report_{int(time.time())}.json', 'w') as f:
            json.dump(report, f, indent=2)
            
        print('Performance report generated')
        "

    - name: Upload performance reports
      uses: actions/upload-artifact@v4
      with:
        name: performance-reports
        path: performance_reports/
        retention-days: 30 